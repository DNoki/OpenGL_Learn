#version 330 core

layout (triangles) in;
layout (line_strip, max_vertices = 18) out;

// 内建变量
//in gl_Vertex
//{
//    vec4  gl_Position;
//    float gl_PointSize;
//    float gl_ClipDistance[];
//} gl_in[];

in v2g
{
    vec3 NormalWorldSpace;
    vec3 TangentWorldSpace;
    vec3 BitangentWorldSpace;
    mat4 Matrix_PV;
} g[];

out g2f
{
    vec4 Color;
} f;

const float MAGNITUDE = 0.05;

void GenerateLine(int index, vec4 pos1, vec4 pos2, vec4 color)
{
    f.Color = color;
    gl_Position = g[index].Matrix_PV * pos1;
    EmitVertex();
    gl_Position = g[index].Matrix_PV * pos2;
    EmitVertex();
    EndPrimitive();
}

void main()
{
    for (int i = 0; i < 3; i++)
    {
        GenerateLine(i, gl_in[i].gl_Position, gl_in[i].gl_Position + vec4(g[i].TangentWorldSpace * MAGNITUDE, 0.0), vec4(1.0f, 0.0f, 0.0f, 0.0f));
        GenerateLine(i, gl_in[i].gl_Position, gl_in[i].gl_Position + vec4(g[i].BitangentWorldSpace * MAGNITUDE, 0.0), vec4(0.0f, 1.0f, 0.0f, 0.0f));
        GenerateLine(i, gl_in[i].gl_Position, gl_in[i].gl_Position + vec4(g[i].NormalWorldSpace * MAGNITUDE, 0.0), vec4(0.0f, 0.0f, 1.0f, 0.0f));
    }
}















